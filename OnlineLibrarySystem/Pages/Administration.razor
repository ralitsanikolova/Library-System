@page "/administration"
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Identity;
@inject UserManager<IdentityUser> _UserManager
@inject RoleManager<IdentityRole> _RoleManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<h3>Administration</h3>

<AuthorizeView>
    <Authorized>
        @if (@context.User.IsInRole(AdministrationRole))
        {
            <table class="table">
                <thead>
                    <tr>
                        <th>Id</th>
                        <th>User Name</th>
                        <th>Email</th>
]                    </tr>
                </thead>
                <tbody>
                    @foreach (var user in ColUsers)
                    {
                        <tr>
                            <td>@user.Id.Substring(0, 5) ...</td>
                            <td>@user.UserName</td>
                            <td>@user.Email</td>

                            <td>
                                <button class="btn btn-primary"
                                @onclick="(() => EditUser(user))">
                                    Edit
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>

            @if (ShowPopup)
            {
                <div class="modal" tabindex="-1" style="display:block" role="dialog">
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h3 class="modal-title">Edit User</h3>
                        <button type="button" class="close"
                                @onclick="ClosePopup">
                                    <span aria-hidden="true">X</span>
                                </button>
                            </div>
                         <div class="modal-body">
                                @if (objUser.Id != "")
                                {
                                    <p>@objUser.Id</p>
                                }
                                @if (objUser.Id != "")
                                {
                                    <p>@objUser.UserName</p>
                                }
                                else
                                {
                                    <input class="form-control" type="text"
                               placeholder="UserName"
                               @bind="objUser.UserName" />
                                }
                                <input class="form-control" type="text"
                               placeholder="Email"
                               @bind="objUser.Email" />
                                <input class="form-control" type="password"
                               placeholder="Password"
                               @bind="objUser.PasswordHash" />
                                <select class="form-control"
                                @bind="@CurrentUserRole">
                                    @foreach (var option in Options)
                                    {
                                        <option value="@option">
                                            @option
                                        </option>
                                    }
                                </select>
                                <br /><br />
                        <button class="btn btn-primary"
                                @onclick="SaveUser">
                                    Save
                                </button>
                                @if (objUser.Id != "")
                                {
                                    <button class="btn btn-danger"
                                @onclick="DeleteUser">
                                        Delete
                                    </button>
                                }
                                <br />
                                <span style="color:red">@strError</span>
                            </div>
                        </div>
                    </div>
                </div>
            }
            <button class="btn btn-success" @onclick="AddNewUser">Add User</button>
        }
        else
        {
            <p>You're not signed in as a user in @AdministrationRole.</p>
        }
    </Authorized>
    <NotAuthorized>
        <p>You're not loggged in.</p>
    </NotAuthorized>
</AuthorizeView>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    System.Security.Claims.ClaimsPrincipal CurrentUser;
    IdentityUser objUser = new IdentityUser();
    List<IdentityUser> ColUsers = new List<IdentityUser>();
    List<string> Options = new List<string>() { "Reader", "Administrator", "Librarian" };
    string AdministrationRole = "Administrators";
    string CurrentUserRole { get; set; } = "Reader";

    string strError = "";
    bool ShowPopup = false;

    void AddNewUser()
    {
        objUser = new IdentityUser();
        objUser.PasswordHash = "*****";
        objUser.Id = "";
        ShowPopup = true;
    }
    async Task SaveUser()
    {
        {
            try
            {
                if (objUser.Id != "")
                {
                    var user = await _UserManager.FindByIdAsync(objUser.Id);
                    user.Email = objUser.Email;
                    await _UserManager.UpdateAsync(user);
                    if (objUser.PasswordHash != "*****")
                    {
                        var resetToken =
                        await _UserManager.GeneratePasswordResetTokenAsync(user);
                        var passworduser =
                        await _UserManager.ResetPasswordAsync(
                        user,
                        resetToken,
                        objUser.PasswordHash);
                        if (!passworduser.Succeeded)
                        {
                            if (passworduser.Errors.FirstOrDefault() != null)
                            {
                                strError = passworduser.Errors.FirstOrDefault().Description;
                            }
                            else
                            {
                                strError = "Pasword error";
                            }
                            return;
                        }
                    }
                    var UserResult =
                    await _UserManager.IsInRoleAsync(user, AdministrationRole);

                    if ((CurrentUserRole == AdministrationRole) & (!UserResult))
                    {
                        await _UserManager
                        .AddToRoleAsync(user, AdministrationRole);
                    }
                    else
                    {
                        if ((CurrentUserRole != AdministrationRole) & (UserResult))
                        {
                            await _UserManager
                            .RemoveFromRoleAsync(user, AdministrationRole);
                        }
                    }
                }
                else
                {
                    var NewUser = new IdentityUser
                        {
                            UserName = objUser.UserName,
                            Email = objUser.Email
                        };

                    var CreateResult = await _UserManager.CreateAsync(NewUser, objUser.PasswordHash);

                    if (!CreateResult.Succeeded)
                    {
                        if (CreateResult.Errors.FirstOrDefault() != null)
                        {
                            strError = CreateResult.Errors.FirstOrDefault().Description;
                        }
                        else
                        {
                            strError = "Create error";
                        }
                        return;
                    }
                    else
                    {
                        if (CurrentUserRole == AdministrationRole)
                        {
                            await _UserManager
                            .AddToRoleAsync(NewUser, AdministrationRole);
                        }
                    }
                }
                ShowPopup = false;
                GetUsers();
            }
            catch (Exception ex)
            {
                strError = ex.GetBaseException().Message;
            }
        }
    }

    async Task EditUser(IdentityUser _IdentityUser)
    {
        objUser = _IdentityUser;

        var user = await _UserManager.FindByIdAsync(objUser.Id);
        if (user != null)
        {
            var UserResult = await _UserManager.IsInRoleAsync(user, AdministrationRole);

            if (UserResult)
            {
                CurrentUserRole = AdministrationRole;
            }
            else
            {
                CurrentUserRole = "Users";
            }
        }
        ShowPopup = true;
    }

    async Task DeleteUser()
    {
        ShowPopup = false;

        var user = await _UserManager.FindByIdAsync(objUser.Id);
        if (user != null)
        {
            await _UserManager.DeleteAsync(user);
        }
        GetUsers();
    }

    void ClosePopup()
    {
        ShowPopup = false;
    }

    public void GetUsers()
    {
        strError = "";
        ColUsers = new List<IdentityUser>();
        var user = _UserManager.Users.Select(x => new IdentityUser
            {
                Id = x.Id,
                UserName = x.UserName,
                Email = x.Email,
                PasswordHash = "*****"
            });
        foreach (var item in user)
        {
            ColUsers.Add(item);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var RoleResult = await _RoleManager.FindByNameAsync(AdministrationRole);
        if (RoleResult == null)
        {
            await _RoleManager.CreateAsync(new IdentityRole(AdministrationRole));
        }
        var user = await _UserManager.FindByNameAsync("Admin123@gmail.com");
        if (user != null)
        {
            var UserResult = await _UserManager.IsInRoleAsync(user, AdministrationRole);
            if (!UserResult)
            {
                await _UserManager.AddToRoleAsync(user, AdministrationRole);
            }
        }
        CurrentUser = (await authenticationStateTask).User;

        GetUsers();
    }
}